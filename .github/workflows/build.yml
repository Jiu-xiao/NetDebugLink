name: Build NetDebugLink

on:
  push:
    branches: [master, main]
  pull_request:
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/xrobot-org/docker-image-esp32:main
      options: --user root

    steps:
      - name: 📥 Checkout NetDebugLink 源码
        uses: actions/checkout@v3

      - name: 📦 Clone libxr 仓库
        run: git clone https://github.com/Jiu-xiao/libxr

      - name: ⏱️ Generate version name
        run: |
          VERSION_NAME="v$(date +%Y.%m.%d).vv$(date +%H.%M)"
          echo "release_name=$VERSION_NAME" >> $GITHUB_ENV

      - name: 📦 安装 XRobot 工具链
        run: pip install xrobot esptool

      - name: ⚙️ 执行 XRobot 初始化
        run: xrobot_setup

      - name: 🛠️ 构建固件
        run: HOME=/root bash -c "source ~/esp/esp-idf/export.sh && idf.py build"

      - name: 🧩 拼接 ESP32-C3 固件
        run: |
          /usr/bin/python3 -m esptool --chip esp32c3 merge_bin \
            -o build/NetDebugLink_Firmware.bin \
            --flash_mode dio \
            --flash_freq 80m \
            --flash_size 2MB \
            0x0 build/bootloader/bootloader.bin \
            0x8000 build/partition_table/partition-table.bin \
            0x10000 build/NetDebugLink.bin

      - name: 📝 创建 Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.release_name }}
          release_name: ESP32-C3 Firmware ${{ env.release_name }}
          draft: false
          prerelease: false

      - name: 🚚 上传合并固件
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/NetDebugLink_Firmware.bin
          asset_name: NetDebugLink_Firmware.bin
          asset_content_type: application/octet-stream

      # ✅ GitHub Pages 部署固件部分
      - name: 📄 准备发布目录
        run: |
          mkdir -p output
          cp build/NetDebugLink_Firmware.bin output/

      - name: 🔧 Setup GitHub Pages
        uses: actions/configure-pages@v5

      - name: 📤 上传固件到 GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: output

      - name: 🚀 部署到 GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
